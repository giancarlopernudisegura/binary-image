#!/usr/bin/env python
import sys
from PIL import Image
from helper_methods import *


def help_prompt():
    command='./bpi'
    description="Open and convert bpi picture files."
    print(f'Usage:\t{command} (-h | --help)')
    print(f'\t{command} (filename)\n')
    print(f'\t{command} -c <infile> <outfile>\n')
    print(description + '\n')
    print('Options:')
    print('\t(filename)           view bpi file')
    print('\t-c <infile> <outfile>  convert a png or jpg to bpi')
    print('\t-h, --help           show this screen')
    print()
    print('GitHub repository: <https://github.com/giancarlopernudisegura/binary-image>')


def convert():
    split_int = lambda a: (a // (2**8), a % (2**8))
    img = Image.open(sys.argv[2])
    print(img.size, img.format)
    pixels = []
    # read pixel data and add it to 2d array
    for x in range(img.size[0]):
        row = []
        for y in range(img.size[1]):
            coordinate = (x, y)
            row.append(img.getpixel(coordinate))
        pixels.append(row)
    print('> done reading input file')
    # save as custom file format
    with open(sys.argv[3], 'wb') as output:
        for w in split_int(img.size[0]):
            output.write(int_to_byte(w))
        for w in split_int(img.size[1]):
            output.write(int_to_byte(w))
        for row in pixels:
            for pixel in row:
                for channel in pixel:
                    output.write(int_to_byte(channel))
    print('> done writing new file')


def view():
    with open(sys.argv[1], 'rb') as f:
        w = byte_to_int(f.read(1)) * (2**8)
        w += byte_to_int(f.read(1))
        h = byte_to_int(f.read(1)) * (2**8)
        h += byte_to_int(f.read(1))
        print("width:", w)
        print("height:", h)
        img = Image.new('RGB', (w, h))
        for x in range(w):
            for y in range(h):
                # saves the next three bytes as integers in a rgb pixel
                r = f.read(1)
                g = f.read(1)
                b = f.read(1)
                rgb = pixel(r, g, b)
                #printf(f'rgb{rgb}, ')
                # change pixel here
                img.putpixel((x, y), rgb)
            #printf('\b\b \n')
        img.show()


if __name__ == "__main__":
    if (len(sys.argv) == 1):
        pass
    elif (sys.argv[1] in ('-h', '--help')):
        help_prompt()
    elif (sys.argv[1] == '-c'):
        if len(sys.argv) == 4:
            convert()
        else:
            help_prompt()
            sys.exit(1)
    #elif (sys.argv[1][-4:] == '.bpi'):
    else:
        view()
